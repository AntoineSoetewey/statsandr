<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tips on Stats and R</title>
    <link>/tags/tips/</link>
    <description>Recent content in Tips on Stats and R</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Thu, 19 Mar 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/tips/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to do a t-test or ANOVA for many variables at once in R and communicate the results in a better way</title>
      <link>/blog/how-to-do-a-t-test-or-anova-for-many-variables-at-once-in-r-and-communicate-the-results-in-a-better-way/</link>
      <pubDate>Thu, 19 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/how-to-do-a-t-test-or-anova-for-many-variables-at-once-in-r-and-communicate-the-results-in-a-better-way/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#perform-multiple-tests-at-once&#34;&gt;Perform multiple tests at once&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#concise-and-easily-interpretable-results&#34;&gt;Concise and easily interpretable results&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#t-test&#34;&gt;T-test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#anova&#34;&gt;ANOVA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#to-go-even-further&#34;&gt;To go even further&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/blog/2020-03-19-how-to-do-a-t-test-or-anova-for-many-variables-at-once-in-r-and-communicate-the-results-in-a-better-way_files/How%20to%20do%20a%20t-test%20or%20ANOVA%20for%20many%20variables%20at%20once%20in%20R%20and%20communicate%20the%20results%20in%20a%20better%20way.jpeg&#34; alt=&#34;Photo by Teemu Paananen&#34; style=&#34;width:100.0%&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Photo by Teemu Paananen&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;As part of my teaching assistant position in a Belgian university, students often ask me for some help in their statistical analyses for their master’s thesis.&lt;/p&gt;
&lt;p&gt;A frequent question is how to compare groups of patients in terms of several &lt;a href=&#34;/blog/variable-types-and-examples/#continuous&#34;&gt;quantitative continuous&lt;/a&gt; variables. Most of us know that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To compare two groups, a &lt;a href=&#34;/blog/student-s-t-test-in-r-and-by-hand-how-to-compare-two-groups-under-different-scenarios/&#34;&gt;Student’s t-test&lt;/a&gt; should be used&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;To compare three groups or more, an ANOVA should be performed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These two tests are quite basic and have been extensively documented online and in statistical textbooks so the difficulty is not in how to perform these tests.&lt;/p&gt;
&lt;p&gt;In the past, I used to do the analyses by following these 3 steps:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Draw boxplots illustrating the distributions by group (with the &lt;code&gt;boxplot()&lt;/code&gt; function or thanks to the &lt;a href=&#34;/blog/rstudio-addins-or-how-to-make-your-coding-life-easier/#esquisse&#34;&gt;&lt;code&gt;{esquisse}&lt;/code&gt; R Studio addin&lt;/a&gt; if I wanted to use the &lt;code&gt;{ggplot2}&lt;/code&gt; package)&lt;/li&gt;
&lt;li&gt;Perform a t-test or an ANOVA depending on the number of groups to compare (with the &lt;code&gt;t.test()&lt;/code&gt; and &lt;code&gt;oneway.test()&lt;/code&gt; functions for t-test and ANOVA, respectively)&lt;/li&gt;
&lt;li&gt;Repeat steps 1 and 2 for each variable&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This was feasible as long as there were only a couple of variables to test. Nonetheless, most students came to me asking to perform these kind of tests not on one or two variables, but on &lt;strong&gt;multiples&lt;/strong&gt; variables. So when there were many variables to test, I quickly realized that I was wasting my time and that there must be a more efficient way to do the job.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: be careful with the issue of multiple testing (also referred as multiplicity) which can arise when you perform multiple t-tests. You can tackle this problem by using the Bonferroni correction, among others. For this, instead of using the standard threshold of &lt;span class=&#34;math inline&#34;&gt;\(\alpha = 5\)&lt;/span&gt;% for the significance level, you can use &lt;span class=&#34;math inline&#34;&gt;\(\alpha = \frac{0.05}{m}\)&lt;/span&gt; where &lt;span class=&#34;math inline&#34;&gt;\(m\)&lt;/span&gt; is the number of t-tests. For example, if you perform 20 t-tests with a desired &lt;span class=&#34;math inline&#34;&gt;\(\alpha = 0.05\)&lt;/span&gt;, the Bonferroni correction implies that you would reject the null hypothesis for each individual test when the p-value is smaller than &lt;span class=&#34;math inline&#34;&gt;\(\alpha = \frac{0.05}{20}\)&lt;/span&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;perform-multiple-tests-at-once&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Perform multiple tests at once&lt;/h1&gt;
&lt;p&gt;I thus wrote a piece of code that automated the process, by drawing boxplots and performing the tests on several variables at once. Below is the code I used, illustrating the process with the &lt;code&gt;iris&lt;/code&gt; dataset. The &lt;code&gt;Species&lt;/code&gt; variable has 3 levels, so let’s remove one, and then draw a boxplot and apply a t-test on all 4 continuous variables at once. Note that the continuous variables that we would like to test are variables 1 to 4 in the &lt;code&gt;iris&lt;/code&gt; dataset.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dat &amp;lt;- iris

# remove one level to have only two groups
dat &amp;lt;- subset(dat, Species != &amp;quot;setosa&amp;quot;)
dat$Species &amp;lt;- factor(dat$Species)

# boxplots and t-tests for the 4 variables at once
for (i in 1:4) { # variables to compare are variables 1 to 4
  boxplot(dat[, i] ~ dat$Species, # draw boxplots by group
    ylab = names(dat[i]), # rename y-axis with variable&amp;#39;s name
    xlab = &amp;quot;Species&amp;quot;
  )
  print(t.test(dat[, i] ~ dat$Species)) # print results of t-test
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/blog/2020-03-19-how-to-do-a-t-test-or-anova-for-many-variables-at-once-in-r-and-communicate-the-results-in-a-better-way_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## 
##  Welch Two Sample t-test
## 
## data:  dat[, i] by dat$Species
## t = -5.6292, df = 94.025, p-value = 1.866e-07
## alternative hypothesis: true difference in means is not equal to 0
## 95 percent confidence interval:
##  -0.8819731 -0.4220269
## sample estimates:
## mean in group versicolor  mean in group virginica 
##                    5.936                    6.588&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/blog/2020-03-19-how-to-do-a-t-test-or-anova-for-many-variables-at-once-in-r-and-communicate-the-results-in-a-better-way_files/figure-html/unnamed-chunk-1-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## 
##  Welch Two Sample t-test
## 
## data:  dat[, i] by dat$Species
## t = -3.2058, df = 97.927, p-value = 0.001819
## alternative hypothesis: true difference in means is not equal to 0
## 95 percent confidence interval:
##  -0.33028364 -0.07771636
## sample estimates:
## mean in group versicolor  mean in group virginica 
##                    2.770                    2.974&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/blog/2020-03-19-how-to-do-a-t-test-or-anova-for-many-variables-at-once-in-r-and-communicate-the-results-in-a-better-way_files/figure-html/unnamed-chunk-1-3.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## 
##  Welch Two Sample t-test
## 
## data:  dat[, i] by dat$Species
## t = -12.604, df = 95.57, p-value &amp;lt; 2.2e-16
## alternative hypothesis: true difference in means is not equal to 0
## 95 percent confidence interval:
##  -1.49549 -1.08851
## sample estimates:
## mean in group versicolor  mean in group virginica 
##                    4.260                    5.552&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/blog/2020-03-19-how-to-do-a-t-test-or-anova-for-many-variables-at-once-in-r-and-communicate-the-results-in-a-better-way_files/figure-html/unnamed-chunk-1-4.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## 
##  Welch Two Sample t-test
## 
## data:  dat[, i] by dat$Species
## t = -14.625, df = 89.043, p-value &amp;lt; 2.2e-16
## alternative hypothesis: true difference in means is not equal to 0
## 95 percent confidence interval:
##  -0.7951002 -0.6048998
## sample estimates:
## mean in group versicolor  mean in group virginica 
##                    1.326                    2.026&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, the above piece of code draws a boxplot and then prints results of the test for each continuous variable, all at once.&lt;/p&gt;
&lt;p&gt;At some point in the past, I even wrote code to:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;draw a boxplot&lt;/li&gt;
&lt;li&gt;test for the equality of variances (thanks to the Levene’s test)&lt;/li&gt;
&lt;li&gt;depending on whether the variances were equal or unequal, the appropriate test was applied: the Welch test if the variances were unequal and the Student’s t-test in the case the variances were equal (see more details about the different versions of the &lt;a href=&#34;/blog/student-s-t-test-in-r-and-by-hand-how-to-compare-two-groups-under-different-scenarios/&#34;&gt;t-test for two samples&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;apply steps 1 to 3 for all continuous variables at once&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I had a similar code for ANOVA in case I needed to compare more than two groups.&lt;/p&gt;
&lt;p&gt;The code was doing the job relatively well. Indeed, thanks to this code I was able to test many variables in an automated way in the sense that it compared groups for all variables at once.&lt;/p&gt;
&lt;p&gt;The only thing I had to change from one project to another is that I needed to modify the name of the grouping variable and the numbering of the continuous variables to test (&lt;code&gt;Species&lt;/code&gt; and &lt;code&gt;1:4&lt;/code&gt; in the above code).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;concise-and-easily-interpretable-results&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Concise and easily interpretable results&lt;/h1&gt;
&lt;div id=&#34;t-test&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;T-test&lt;/h2&gt;
&lt;p&gt;Although it was working quite well and applicable to different projects with only minor changes, I was still unsatisfied with another point.&lt;/p&gt;
&lt;p&gt;Someone who is proficient in statistics and R can read and interpret the output of a t-test without any difficulty. However, as you may have noticed with your own statistical projects, most people do not know what to look for in the results and are sometimes a bit confused when they see so many graphs, code, output, results and numeric values in a document. They are quite easily overwhelmed by this mass of information.&lt;/p&gt;
&lt;p&gt;With my old R routine, the time I was saving by automating the process of t-tests and ANOVA was (partially) lost when I had to explain R outputs to my students so that they could interpret the results correctly. Although most of the time it simply boiled down to pointing out what to look for in the outputs (i.e., &lt;em&gt;p&lt;/em&gt;-values), I was still losing quite a lot of time because these outputs were, in my opinion, too detailed for most real-life applications. In other words, too much information seemed to be confusing for many people so I was still not convinced that it was the most optimal way to share statistical results to nonscientists.&lt;/p&gt;
&lt;p&gt;Of course, they came to me for statistical advices, so they expected to have these results and I needed to give them answers to their questions and hypotheses. Nonetheless, I wanted to find a better way to communicate these results to this type of audience, with the minimum of information required to arrive at a conclusion. No more and no less than that.&lt;/p&gt;
&lt;p&gt;After a long time spent online trying to figure out a way to present results in a more concise and readable way, I discovered the &lt;a href=&#34;https://cran.r-project.org/web/packages/ggpubr/index.html&#34;&gt;&lt;code&gt;{ggpubr}&lt;/code&gt; package&lt;/a&gt;. This package allows to indicate the test used and the &lt;em&gt;p&lt;/em&gt;-value of the test directly on a ggplot2-based graph. It also facilitates the creation of publication-ready plots for non-advanced statistical audiences.&lt;/p&gt;
&lt;p&gt;After many refinements and modifications of the initial code (available in this &lt;a href=&#34;http://www.sthda.com/english/articles/24-ggpubr-publication-ready-plots/76-add-p-values-and-significance-levels-to-ggplots/&#34;&gt;article&lt;/a&gt;), I finally came up with a rather stable and robust process to perform t-tests and ANOVA for many variables at once, and more importantly, make the results concise and easily readable by anyone (statisticians or not).&lt;/p&gt;
&lt;p&gt;A graph is worth a thousand words, so here are the exact same tests than in the previous section, but this time with my new R routine:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggpubr)

# Edit from here #
x &amp;lt;- which(names(dat) == &amp;quot;Species&amp;quot;) # name of grouping variable
y &amp;lt;- which(names(dat) == &amp;quot;Sepal.Length&amp;quot; # names of variables to test
| names(dat) == &amp;quot;Sepal.Width&amp;quot;
| names(dat) == &amp;quot;Petal.Length&amp;quot;
| names(dat) == &amp;quot;Petal.Width&amp;quot;)
method &amp;lt;- &amp;quot;t.test&amp;quot; # one of &amp;quot;wilcox.test&amp;quot; or &amp;quot;t.test&amp;quot;
paired &amp;lt;- FALSE # if paired make sure that in the dataframe you have first all individuals at T1, then all individuals again at T2
# Edit until here


# Edit at your own risk
for (i in y) {
  for (j in x) {
    ifelse(paired == TRUE,
      p &amp;lt;- ggpaired(dat,
        x = colnames(dat[j]), y = colnames(dat[i]),
        color = colnames(dat[j]), line.color = &amp;quot;gray&amp;quot;, line.size = 0.4,
        palette = &amp;quot;npg&amp;quot;,
        legend = &amp;quot;none&amp;quot;,
        xlab = colnames(dat[j]),
        ylab = colnames(dat[i]),
        add = &amp;quot;jitter&amp;quot;
      ),
      p &amp;lt;- ggboxplot(dat,
        x = colnames(dat[j]), y = colnames(dat[i]),
        color = colnames(dat[j]),
        palette = &amp;quot;npg&amp;quot;,
        legend = &amp;quot;none&amp;quot;,
        add = &amp;quot;jitter&amp;quot;
      )
    )
    #  Add p-value
    print(p + stat_compare_means(aes(label = paste0(..method.., &amp;quot;, p-value = &amp;quot;, ..p.format.., &amp;quot; (&amp;quot;, ifelse(..p.adj.. &amp;gt;= 0.05, &amp;quot;not significant&amp;quot;, ..p.signif..), &amp;quot;)&amp;quot;)),
      method = method,
      paired = paired,
      # group.by = NULL,
      ref.group = NULL
    ))
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/blog/2020-03-19-how-to-do-a-t-test-or-anova-for-many-variables-at-once-in-r-and-communicate-the-results-in-a-better-way_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;img src=&#34;/blog/2020-03-19-how-to-do-a-t-test-or-anova-for-many-variables-at-once-in-r-and-communicate-the-results-in-a-better-way_files/figure-html/unnamed-chunk-2-2.png&#34; width=&#34;672&#34; /&gt;&lt;img src=&#34;/blog/2020-03-19-how-to-do-a-t-test-or-anova-for-many-variables-at-once-in-r-and-communicate-the-results-in-a-better-way_files/figure-html/unnamed-chunk-2-3.png&#34; width=&#34;672&#34; /&gt;&lt;img src=&#34;/blog/2020-03-19-how-to-do-a-t-test-or-anova-for-many-variables-at-once-in-r-and-communicate-the-results-in-a-better-way_files/figure-html/unnamed-chunk-2-4.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;As you can see from the graphs above, only the most important information is presented for each variable:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a visual comparison of the groups thanks to boxplots&lt;/li&gt;
&lt;li&gt;the name of the statistical test&lt;/li&gt;
&lt;li&gt;the &lt;em&gt;p&lt;/em&gt;-value of the test&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Based on these graphs, it is easy, even for non-experts, to interpret the results and conclude that the &lt;code&gt;versicolor&lt;/code&gt; and &lt;code&gt;virginica&lt;/code&gt; species are significantly different in terms of all 4 variables (since &lt;em&gt;p&lt;/em&gt;-values &lt;span class=&#34;math inline&#34;&gt;\(&amp;lt; \frac{0.05}{4} = 0.0125\)&lt;/span&gt; (we divide the usual &lt;span class=&#34;math inline&#34;&gt;\(\alpha\)&lt;/span&gt; level by 4 because there are 4 t-tests)).&lt;/p&gt;
&lt;p&gt;Of course, experts may be interested in more advanced results. However, this simple yet complete graph, which includes the name of the test and the &lt;em&gt;p&lt;/em&gt;-value, gives all the necessary information to answer the question: “Are the groups different?”.&lt;/p&gt;
&lt;p&gt;In my experience, I have noticed that students and professionals (especially those from a less scientific background) understand way better these results than the ones presented in the previous section.&lt;/p&gt;
&lt;p&gt;The only lines of code that need to be modified for your own project is the name of the grouping variable (&lt;code&gt;Species&lt;/code&gt; in the above code), the names of the variables you want to test (&lt;code&gt;Sepal.Length&lt;/code&gt;, &lt;code&gt;Sepal.Width&lt;/code&gt;, etc.),&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; whether you want to apply a t-test (&lt;code&gt;t.test&lt;/code&gt;) or Wilcoxon test (&lt;code&gt;wilcox.test&lt;/code&gt;) and whether the samples are paired or not (&lt;code&gt;FALSE&lt;/code&gt; if samples are independent, &lt;code&gt;TRUE&lt;/code&gt; if they are paired).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;anova&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;ANOVA&lt;/h2&gt;
&lt;p&gt;Below the same process with an ANOVA. Note that we reload the dataset &lt;code&gt;iris&lt;/code&gt; to include all three &lt;code&gt;Species&lt;/code&gt; this time:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dat &amp;lt;- iris

# Edit from here
x &amp;lt;- which(names(dat) == &amp;quot;Species&amp;quot;) # name of grouping variable
y &amp;lt;- which(names(dat) == &amp;quot;Sepal.Length&amp;quot; # names of variables to test
| names(dat) == &amp;quot;Sepal.Width&amp;quot;
| names(dat) == &amp;quot;Petal.Length&amp;quot;
| names(dat) == &amp;quot;Petal.Width&amp;quot;)
method1 &amp;lt;- &amp;quot;anova&amp;quot; # one of &amp;quot;anova&amp;quot; or &amp;quot;kruskal.test&amp;quot;
method2 &amp;lt;- &amp;quot;t.test&amp;quot; # one of &amp;quot;wilcox.test&amp;quot; or &amp;quot;t.test&amp;quot;
my_comparisons &amp;lt;- list(c(&amp;quot;setosa&amp;quot;, &amp;quot;versicolor&amp;quot;), c(&amp;quot;setosa&amp;quot;, &amp;quot;virginica&amp;quot;), c(&amp;quot;versicolor&amp;quot;, &amp;quot;virginica&amp;quot;)) # comparisons for post-hoc tests
# Edit until here


# Edit at your own risk
for (i in y) {
  for (j in x) {
    p &amp;lt;- ggboxplot(dat,
      x = colnames(dat[j]), y = colnames(dat[i]),
      color = colnames(dat[j]),
      legend = &amp;quot;none&amp;quot;,
      palette = &amp;quot;npg&amp;quot;,
      add = &amp;quot;jitter&amp;quot;
    )
    print(
      p + stat_compare_means(aes(label = paste0(..method.., &amp;quot;, p-value = &amp;quot;, ..p.format.., &amp;quot; (&amp;quot;, ifelse(..p.adj.. &amp;gt; 0.05, &amp;quot;not significant&amp;quot;, ..p.signif..), &amp;quot;)&amp;quot;)),
        method = method1, label.y = max(dat[, i], na.rm = TRUE)
      )
      + stat_compare_means(comparisons = my_comparisons, method = method2, label = &amp;quot;p.format&amp;quot;) # remove if p-value of ANOVA or Kruskal-Wallis test &amp;gt;= 0.05
    )
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/blog/2020-03-19-how-to-do-a-t-test-or-anova-for-many-variables-at-once-in-r-and-communicate-the-results-in-a-better-way_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;img src=&#34;/blog/2020-03-19-how-to-do-a-t-test-or-anova-for-many-variables-at-once-in-r-and-communicate-the-results-in-a-better-way_files/figure-html/unnamed-chunk-3-2.png&#34; width=&#34;672&#34; /&gt;&lt;img src=&#34;/blog/2020-03-19-how-to-do-a-t-test-or-anova-for-many-variables-at-once-in-r-and-communicate-the-results-in-a-better-way_files/figure-html/unnamed-chunk-3-3.png&#34; width=&#34;672&#34; /&gt;&lt;img src=&#34;/blog/2020-03-19-how-to-do-a-t-test-or-anova-for-many-variables-at-once-in-r-and-communicate-the-results-in-a-better-way_files/figure-html/unnamed-chunk-3-4.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Like the improved routine for the t-test, I have noticed that students and non-expert professionals understand ANOVA results presented this way much more easily compared to the default R outputs.&lt;/p&gt;
&lt;p&gt;With one graph for each variable, it is easy to see that all species are different from each other in terms of all 4 variables (since all &lt;em&gt;p&lt;/em&gt;-values of post-hoc tests &amp;lt; 0.05).&lt;/p&gt;
&lt;p&gt;If you want to apply the same automated process to your data, you will need to modify the name of the grouping variable (&lt;code&gt;Species&lt;/code&gt;), the names of the variables you want to test (&lt;code&gt;Sepal.Length&lt;/code&gt;, etc.), whether you want to perform an ANOVA (&lt;code&gt;anova&lt;/code&gt;) or Kruskal-Wallis test (&lt;code&gt;kruskal.test&lt;/code&gt;) and finally specify the comparisons for the post-hoc tests.&lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;to-go-even-further&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;To go even further&lt;/h1&gt;
&lt;p&gt;As we have seen, these two improved R routines allow to:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Perform t-tests and ANOVA on a small or large number of variables with only minor changes to the code. I basically only have to replace the variable names and the name of the test I want to use. It takes almost the same time to test one or several variables so it is quite an improvement compared to testing one variable at a time&lt;/li&gt;
&lt;li&gt;Share test results in a much proper and cleaner way. This is possible thanks to a graph showing the observations by group and the &lt;em&gt;p&lt;/em&gt;-value of the appropriate test included on this graph. This is particularily important when communicating results to a wider audience or to people from diverse backgrounds.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;However, like most of my R routines, these two pieces of code are still a work in progress. Below are some additional features I have been thinking of and which could be added in the future to make the process of comparing two or more groups even more optimal:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add the possibility to select variables by their numbering in the dataframe. For the moment it is only possible to do it via their names. This will allow to automate the process even further because instead of typing all variable names one by one, we could simply type &lt;code&gt;4:100&lt;/code&gt; (to test variables 4 to 100 for instance).&lt;/li&gt;
&lt;li&gt;When comparing more than two groups, it is only possible to apply an ANOVA or Kruskal-Wallis test at the moment. A major improvement would be to add the possibility to perform a repeated measures ANOVA (i.e., an ANOVA when the samples are dependent). It is currently already possible to do a t-test with two paired samples, but it is not yet possible to do the same with more than two groups.&lt;/li&gt;
&lt;li&gt;Another less important (yet still nice) feature when comparing more than 2 groups would be to automatically apply post-hoc tests only in the case where the null hypothesis of the ANOVA or Kruskal-Wallis test is rejected (so when there is at least one group different from the others, because if the null hypothesis of equal groups is not rejected we do not apply a post-hoc test). At the present time, I manually add or remove the code that displays the &lt;em&gt;p&lt;/em&gt;-values of post-hoc tests depending on the global &lt;em&gt;p&lt;/em&gt;-value of the ANOVA or Kruskal-Wallis test.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I will try to add these features in the future, or I would be glad to help if the author of the {ggpubr} package needs help in including these features (I hope he will see this article!).&lt;/p&gt;
&lt;p&gt;Thanks for reading. I hope this article will help you to perform t-tests and ANOVA for multiple variables at once and make the results more easily readable and interpretable by nonscientists. Learn more about the t-test and how to compare two samples in &lt;a href=&#34;/blog/student-s-t-test-in-r-and-by-hand-how-to-compare-two-groups-under-different-scenarios/&#34;&gt;this article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As always, if you have a question or a suggestion related to the topic covered in this article, please add it as a comment so other readers can benefit from the discussion. If you find a mistake or bug, you can inform me by &lt;a href=&#34;https://github.com/AntoineSoetewey/statsandr/issues&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;raising an issue on GitHub&lt;/a&gt;. For all other requests, you can contact me &lt;a href=&#34;/contact/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Get updates every time a new article is published by &lt;a href=&#34;/subscribe/&#34;&gt;subscribing to this blog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Related articles:&lt;/strong&gt;&lt;/p&gt;
&lt;script src=&#34;//rss.bloople.net/?url=https%3A%2F%2Fwww.statsandr.com%2Ftags%2Fr%2Findex.xml&amp;detail=-1&amp;limit=5&amp;showtitle=false&amp;type=js&#34;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;In theory, an ANOVA can also be used to compare two groups as it will give the same results compared to a Student’s t-test, but in practice we use the Student’s t-test to compare two samples and the ANOVA to compare three samples or more.&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;Do not forget to separate the variables you want to test with &lt;code&gt;|&lt;/code&gt;.&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;Post-hoc test is only the name used to refer to a specific type of statistical tests. Post-hoc test includes, among others, the Tukey HSD test, the Bonferroni correction, Dunnett’s test. Even if an ANOVA or a Kruskal-Wallis test can determine whether there is at least one group that is different from the others, it does not allow us to conclude &lt;strong&gt;which&lt;/strong&gt; are different from each other. For this purpose, there are post-hoc tests that compare all groups two by two to determine which ones are different, after adjusting for multiple comparisons. Concretely, post-hoc tests are performed to each possible pair of groups &lt;strong&gt;after&lt;/strong&gt; an ANOVA or a Kruskal-Wallis test has shown that there is at least one group which is different (hence “post” in the name of this type of test). The null and alternative hypotheses and the interpretations of these tests are similar to a Student’s t-test for two samples.&lt;a href=&#34;#fnref3&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>An efficient way to install and load R packages</title>
      <link>/blog/an-efficient-way-to-install-and-load-r-packages/</link>
      <pubDate>Fri, 31 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/an-efficient-way-to-install-and-load-r-packages/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#what-is-a-r-package-and-how-to-use-it&#34;&gt;What is a R package and how to use it?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#inefficient-way-to-install-and-load-r-packages&#34;&gt;Inefficient way to install and load R packages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#more-efficient-way&#34;&gt;More efficient way&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#most-efficient-way&#34;&gt;Most efficient way&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#pacman-package&#34;&gt;&lt;code&gt;{pacman}&lt;/code&gt; package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#librarian-package&#34;&gt;&lt;code&gt;{librarian}&lt;/code&gt; package&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/blog/an-efficient-way-to-install-and-load-r-packages_files/0_6wKnVe1op_A5stKw.jpeg&#34; alt=&#34;Photo by Claudio Schwarz&#34; style=&#34;width:100.0%&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Photo by Claudio Schwarz&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;what-is-a-r-package-and-how-to-use-it&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;What is a R package and how to use it?&lt;/h1&gt;
&lt;p&gt;Unlike other programs, only fundamental functionalities come by default with R. You will thus often need to install some “extensions” to perform the analyses you want. These extensions which are are collections of functions and datasets developed and published by R users are called &lt;strong&gt;packages&lt;/strong&gt;. They extend existing base R functionalities by adding new ones. R is open source so everyone can write code and publish it as a package, and everyone can install a package and start using the functions or datasets built inside the package, all this for free.&lt;/p&gt;
&lt;p&gt;In order to use a package, it needs to be installed on your computer by running &lt;code&gt;install.packages(&amp;quot;name_of_package&amp;quot;)&lt;/code&gt; (do not forget &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt; around the name of the package, otherwise R will look for an object saved under that name!). Once the package is installed, you must load the package and only after it has been loaded you can use all the functions and datasets it contains. To load a package, run &lt;code&gt;library(name_of_package)&lt;/code&gt; (this time &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt; around the name of the package are optional, but can still be used if you wish).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;inefficient-way-to-install-and-load-r-packages&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Inefficient way to install and load R packages&lt;/h1&gt;
&lt;p&gt;Depending on how long you have been using R, you may use a limited amount of packages or, on the contrary, a large amount of them. As you use more and more packages you will soon start to have (too) many lines of code just for installing and loading them.&lt;/p&gt;
&lt;p&gt;Here is a preview of the code from my PhD thesis showing how the installation and loading of R packages looked like when I started working on R (only a fraction of them are displayed to shorten the code):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Installation of required packages
install.packages(&amp;quot;tidyverse&amp;quot;)
install.packages(&amp;quot;ggplot2&amp;quot;)
install.packages(&amp;quot;readxl&amp;quot;)
install.packages(&amp;quot;dplyr&amp;quot;)
install.packages(&amp;quot;tidyr&amp;quot;)
install.packages(&amp;quot;ggfortify&amp;quot;)
install.packages(&amp;quot;DT&amp;quot;)
install.packages(&amp;quot;reshape2&amp;quot;)
install.packages(&amp;quot;knitr&amp;quot;)
install.packages(&amp;quot;lubridate&amp;quot;)

# Load packages
library(&amp;quot;tidyverse&amp;quot;)
library(&amp;quot;ggplot2&amp;quot;)
library(&amp;quot;readxl&amp;quot;)
library(&amp;quot;dplyr&amp;quot;)
library(&amp;quot;tidyr&amp;quot;)
library(&amp;quot;ggfortify&amp;quot;)
library(&amp;quot;DT&amp;quot;)
library(&amp;quot;reshape2&amp;quot;)
library(&amp;quot;knitr&amp;quot;)
library(&amp;quot;lubridate&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can guess the code became longer and longer as I needed more and more packages for my analyses. Moreover, I tended to reinstall all packages as I was working on 4 different computers and I could not remember which packages were already installed on which machine. Reinstalling all packages every time I opened my script or R Markdown document was a waste of time.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;more-efficient-way&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;More efficient way&lt;/h1&gt;
&lt;p&gt;Then one day, a colleague of mine shared some of his code with me. I am glad he did as he introduced me to a much more efficient way to install and load R packages. He gave me the permission to share the tip, so here is the code I now use to perform the task of installing and loading R packages:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Package names
packages &amp;lt;- c(&amp;quot;ggplot2&amp;quot;, &amp;quot;readxl&amp;quot;, &amp;quot;dplyr&amp;quot;, &amp;quot;tidyr&amp;quot;, &amp;quot;ggfortify&amp;quot;, &amp;quot;DT&amp;quot;, &amp;quot;reshape2&amp;quot;, &amp;quot;knitr&amp;quot;, &amp;quot;lubridate&amp;quot;, &amp;quot;pwr&amp;quot;, &amp;quot;psy&amp;quot;, &amp;quot;car&amp;quot;, &amp;quot;doBy&amp;quot;, &amp;quot;imputeMissings&amp;quot;, &amp;quot;RcmdrMisc&amp;quot;, &amp;quot;questionr&amp;quot;, &amp;quot;vcd&amp;quot;, &amp;quot;multcomp&amp;quot;, &amp;quot;KappaGUI&amp;quot;, &amp;quot;rcompanion&amp;quot;, &amp;quot;FactoMineR&amp;quot;, &amp;quot;factoextra&amp;quot;, &amp;quot;corrplot&amp;quot;, &amp;quot;ltm&amp;quot;, &amp;quot;goeveg&amp;quot;, &amp;quot;corrplot&amp;quot;, &amp;quot;FSA&amp;quot;, &amp;quot;MASS&amp;quot;, &amp;quot;scales&amp;quot;, &amp;quot;nlme&amp;quot;, &amp;quot;psych&amp;quot;, &amp;quot;ordinal&amp;quot;, &amp;quot;lmtest&amp;quot;, &amp;quot;ggpubr&amp;quot;, &amp;quot;dslabs&amp;quot;, &amp;quot;stringr&amp;quot;, &amp;quot;assist&amp;quot;, &amp;quot;ggstatsplot&amp;quot;, &amp;quot;forcats&amp;quot;, &amp;quot;styler&amp;quot;, &amp;quot;remedy&amp;quot;, &amp;quot;snakecaser&amp;quot;, &amp;quot;addinslist&amp;quot;, &amp;quot;esquisse&amp;quot;, &amp;quot;here&amp;quot;, &amp;quot;summarytools&amp;quot;, &amp;quot;magrittr&amp;quot;, &amp;quot;tidyverse&amp;quot;, &amp;quot;funModeling&amp;quot;, &amp;quot;pander&amp;quot;, &amp;quot;cluster&amp;quot;, &amp;quot;abind&amp;quot;)

# Install packages not yet installed
installed_packages &amp;lt;- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
  install.packages(packages[!installed_packages])
}

# Packages loading
invisible(lapply(packages, library, character.only = TRUE))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This code for installing and loading R packages is more efficient in several ways:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;The function &lt;code&gt;install.packages()&lt;/code&gt; accepts a vector as argument, so one line of code for each package in the past is now one line including all packages&lt;/li&gt;
&lt;li&gt;In the second part of the code, it checks whether a package is already installed or not, and then install only the missing ones&lt;/li&gt;
&lt;li&gt;Regarding the packages loading (the last part of the code), the &lt;code&gt;lapply()&lt;/code&gt; function is used to call the &lt;code&gt;library()&lt;/code&gt; function on all packages at once, which makes the code more condense.&lt;/li&gt;
&lt;li&gt;The output when loading a package is rarely useful. The &lt;code&gt;invisible()&lt;/code&gt; function removes this output.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;From that day on, every time I need to use a new package, I simply add it to the vector &lt;code&gt;packages&lt;/code&gt; at the top of the code, which is located at the top of my scripts and R Markdown documents. No matter on which computer I am working on, running the entire code will install only the missing packages and will load all of them. This greatly reduced the running time for the installation and loading of my R packages.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;most-efficient-way&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Most efficient way&lt;/h1&gt;
&lt;div id=&#34;pacman-package&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;code&gt;{pacman}&lt;/code&gt; package&lt;/h2&gt;
&lt;p&gt;After this article was published, a reader informed me about the &lt;code&gt;{packman}&lt;/code&gt; package. After having read the documentation and try it out myself, I learned that the function &lt;code&gt;p_load()&lt;/code&gt; from &lt;code&gt;{pacman}&lt;/code&gt; checks to see if a package is installed, if not it attempts to install the package and then loads it. It can also be applied to several packages at once, all this in a very condensed way:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;pacman&amp;quot;)

pacman::p_load(ggplot2, tidyr, dplyr)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Find more about this package on &lt;a href=&#34;https://cran.r-project.org/web/packages/pacman/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CRAN&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;librarian-package&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;code&gt;{librarian}&lt;/code&gt; package&lt;/h2&gt;
&lt;p&gt;Like &lt;code&gt;{pacman}&lt;/code&gt;, the &lt;code&gt;shelf()&lt;/code&gt; function from the &lt;code&gt;{librarian}&lt;/code&gt; package automatically installs, updates, and loads R packages that are not yet installed in a single function. The function accepts packages from CRAN, GitHub, and Bioconductor (only if Bioconductor’s &lt;code&gt;Biobase&lt;/code&gt; package is installed). The function also accepts multiple package entries, provided as a comma-separated list of unquoted names (so no &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt; around package names).&lt;/p&gt;
&lt;p&gt;Last but not least, the &lt;code&gt;{librarian}&lt;/code&gt; package allows to load packages automatically at the start of every R session (thanks to the &lt;code&gt;lib_startup()&lt;/code&gt; function) and search for new packages on CRAN by keywords or regular expressions (thanks to the &lt;code&gt;browse_cran()&lt;/code&gt; function).&lt;/p&gt;
&lt;p&gt;Here is an example of how to install missing packages and load them with the &lt;code&gt;shelf()&lt;/code&gt; function:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# From CRAN:
install.packages(&amp;quot;librarian&amp;quot;)

librarian::shelf(ggplot2, DesiQuintans / desiderata, pander)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For CRAN packages, provide the package name as normal without &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt; and for GitHub packages, provide the username and package name separated by &lt;code&gt;/&lt;/code&gt; (i.e., &lt;code&gt;UserName/RepoName&lt;/code&gt; as shown for the &lt;code&gt;desiderata&lt;/code&gt; package).&lt;/p&gt;
&lt;p&gt;Find more about this package on &lt;a href=&#34;https://cran.r-project.org/web/packages/librarian/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CRAN&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thanks for reading. I hope the article helped you to install and load R packages in a more efficient way.&lt;/p&gt;
&lt;p&gt;As always, if you have a question or a suggestion related to the topic covered in this article, please add it as a comment so other readers can benefit from the discussion. If you find a mistake or bug, you can inform me by &lt;a href=&#34;https://github.com/AntoineSoetewey/statsandr/issues&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;raising an issue on GitHub&lt;/a&gt;. For all other requests, you can contact me &lt;a href=&#34;/contact/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Get updates every time a new article is published by &lt;a href=&#34;/subscribe/&#34;&gt;subscribing to this blog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;A special thanks Danilo and James for informing me about the &lt;code&gt;{pacman}&lt;/code&gt; and &lt;code&gt;{librarian}&lt;/code&gt; packages.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Related articles:&lt;/strong&gt;&lt;/p&gt;
&lt;script src=&#34;//rss.bloople.net/?url=https%3A%2F%2Fwww.statsandr.com%2Ftags%2Fr%2Findex.xml&amp;detail=-1&amp;limit=5&amp;showtitle=false&amp;type=js&#34;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>RStudio addins, or how to make your coding life easier</title>
      <link>/blog/rstudio-addins-or-how-to-make-your-coding-life-easier/</link>
      <pubDate>Sun, 26 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/rstudio-addins-or-how-to-make-your-coding-life-easier/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#what-are-rstudio-addins&#34;&gt;What are RStudio addins?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#addins&#34;&gt;Addins&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#esquisse&#34;&gt;Esquisse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#questionr&#34;&gt;Questionr&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#recoding-factors&#34;&gt;Recoding factors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#reordering-factors&#34;&gt;Reordering factors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#categorize-a-numeric-variable&#34;&gt;Categorize a numeric variable&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#remedy&#34;&gt;Remedy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#styler&#34;&gt;Styler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#snakecaser&#34;&gt;Snakecaser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#viewpipesteps&#34;&gt;ViewPipeSteps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#blogdown&#34;&gt;Blogdown&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/blog/best-rstudio-addins-in-rstudio-or-how-to-make-your-coding-life-easier_files/rstudio-addins.jpeg&#34; alt=&#34;Photo by Safar Safarov&#34; style=&#34;width:100.0%&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Photo by Safar Safarov&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;what-are-rstudio-addins&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;What are RStudio addins?&lt;/h1&gt;
&lt;p&gt;Although I have been using RStudio for several years, I only recently discovered RStudio addins. Since then, I am using these addins almost every time I use RStudio.&lt;/p&gt;
&lt;p&gt;What are RStudio addins? RStudio addins are extensions which provide a simple mechanism for executing advanced R functions from within RStudio. In simpler words, when executing an addin (by clicking a button in the Addins menu), the corresponding code is executed without you having to write the code. If it is still not clear, remember that for &lt;a href=&#34;/blog/how-to-import-an-excel-file-in-rstudio/&#34;&gt;importing a dataset in RStudio&lt;/a&gt;, you have two options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;import it by writing the code (thanks to the &lt;code&gt;read.csv()&lt;/code&gt; function for instance)&lt;/li&gt;
&lt;li&gt;or you can import it by clicking on the “Import Dataset” button in the Environment pane, set the importing settings, then click on “Import”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A RStudio addin is exactly like the Import Dataset button but for other common functionalities. So you could write code as you can import a dataset by writing code, but thanks to RStudio addins you can execute code without actually writing the necessary code. By using the RStudio addins, RStudio will run the required code for you. RStudio addins can be as simple as a function that inserts a commonly used snippet of code, and as complex as a Shiny application that accepts input from the user to draw a plot. RStudio addins have the advantage that they allow you to execute complex and advanced code much more easily than if you would have to write it yourself.&lt;/p&gt;
&lt;p&gt;I believe addins are worth trying for all R users. Beginners will have the possibility to use functions that they would not have used otherwise because the code is too complex, whereas advanced users may find them useful to speed up the writing of their code in some circumstances. For other tips in R, see the article “&lt;a href=&#34;/blog/tips-and-tricks-in-rstudio-and-r-markdown/&#34;&gt;Tips and tricks in RStudio and R Markdown&lt;/a&gt;”.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;installation&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Installation&lt;/h1&gt;
&lt;p&gt;RStudio Addins are distributed as R packages. So before being able to use them, you need to install them. You can install an addin exactly the same way you install a package: &lt;code&gt;install.packages(&amp;quot;name_of_addin&amp;quot;)&lt;/code&gt;. Once you have installed the R package that contains the addin, it will immediately become available within RStudio, via the Addins menu located at the top.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/blog/best-rstudio-addins-in-rstudio-or-how-to-make-your-coding-life-easier_files/rstudio-addins-toolbar.png&#34; alt=&#34;RStudio addins toolbar&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;RStudio addins toolbar&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;addins&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Addins&lt;/h1&gt;
&lt;p&gt;If you are still not convinced, see below a list of the addins I find most useful together with concrete examples in the following sections.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Esquisse&lt;/li&gt;
&lt;li&gt;Questionr&lt;/li&gt;
&lt;li&gt;Remedy&lt;/li&gt;
&lt;li&gt;Styler&lt;/li&gt;
&lt;li&gt;Snakecaser&lt;/li&gt;
&lt;li&gt;Blogdown&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that this list is not exhaustive and you are likely to find others useful too depending on what type of analyses you do on RStudio. Feel free to comment at the end of the article to let me know (and other readers) addins you found worth using.&lt;/p&gt;
&lt;div id=&#34;esquisse&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Esquisse&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;{esquisse}&lt;/code&gt; is an addin developed by a French company called &lt;a href=&#34;https://www.dreamrs.fr/&#34;&gt;dreamRs&lt;/a&gt;. Here is how they define it:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This addin allows you to interactively explore your data by visualizing it with the ggplot2 package. It allows you to draw bar plots, curves, scatter plots, histograms, boxplot and sf objects, then export the graph or retrieve the code to reproduce the graph.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With this addin you can easily create beautiful graphs from the &lt;code&gt;{ggplot2}&lt;/code&gt; package and the best part according to me is that you can retrieve the code to reproduce the graph. Compared to the default &lt;code&gt;{graphics}&lt;/code&gt; package, it is true that graphs from the &lt;code&gt;{ggplot2}&lt;/code&gt; package look usually better but the code is also longer and more complex. With this addin, you can draw graphs from the &lt;code&gt;{ggplot2}&lt;/code&gt; package by dragging and dropping variables of interest in an user-friendly and interactive window, and then use the generated code in your script.&lt;/p&gt;
&lt;p&gt;For the sake of illustration, let’s say wee want to create a scatter plot of the variables &lt;code&gt;Sepal.Length&lt;/code&gt; and &lt;code&gt;Petal.Length&lt;/code&gt; of the dataset &lt;code&gt;iris&lt;/code&gt; and color the points by the variable &lt;code&gt;Species&lt;/code&gt;. For this, follow these steps:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;load the dataset and rename it:&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dat &amp;lt;- iris&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;install the package &lt;code&gt;{esquisse}&lt;/code&gt;. This must be done only once&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;esquisse&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;open the ‘ggplot2’ builder from the RStudio Addins menu:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/blog/best-rstudio-addins-in-rstudio-or-how-to-make-your-coding-life-easier_files/esquisse-RStudio-addin.png&#34; alt=&#34;Step 3: Open ‘ggplot2’ builder from the RStudio addins menu&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Step 3: Open ‘ggplot2’ builder from the RStudio addins menu&lt;/p&gt;
&lt;/div&gt;
&lt;ol start=&#34;4&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Select the dataset you want to work on (in this case &lt;code&gt;dat&lt;/code&gt;) and click on “Validate imported data” after checking that the number of observations and variables are correct (green box):&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/blog/best-rstudio-addins-in-rstudio-or-how-to-make-your-coding-life-easier_files/esquisse-rstudio-addin2.png&#34; alt=&#34;Step 4: Select dataset and validate the imported data&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Step 4: Select dataset and validate the imported data&lt;/p&gt;
&lt;/div&gt;
&lt;ol start=&#34;5&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Drag and drop the variables of interest in the corresponding areas. In this case, we would like to draw a scatter plot of the variables &lt;code&gt;Sepal.Length&lt;/code&gt; and &lt;code&gt;Petal.Length&lt;/code&gt; and color points based on the variable &lt;code&gt;Species&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/blog/best-rstudio-addins-in-rstudio-or-how-to-make-your-coding-life-easier_files/esquisse-rstudio-addin3.png&#34; alt=&#34;Step 5: Drag and drop the variables in the corresponding areas&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Step 5: Drag and drop the variables in the corresponding areas&lt;/p&gt;
&lt;/div&gt;
&lt;ol start=&#34;6&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Click on “&amp;lt;/&amp;gt; Export &amp;amp; code” at the bottom right of the window. You can either copy the code and paste it where you want to place it in your script, or you can click on “Insert code in script” to place the code where your cursor is located in your script:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/blog/best-rstudio-addins-in-rstudio-or-how-to-make-your-coding-life-easier_files/esquisse-rstudio-addin4.png&#34; alt=&#34;Step 6: Retrieve the code to use it in your script&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Step 6: Retrieve the code to use it in your script&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;If you chose the second option, the code should appear where your cursor was located. Many different options and customizations are possible (e.g., axis labels, colors, legend position, theme, data filtering, etc.). For this, use the buttons located at the bottom of the window (“Labels &amp;amp; title”, “Plot options” and “Data”). You can see the changes instantly in the window, and when the plot corresponds to your needs, export the code into your script. I will not go into more details regarding the different types of plots and the customizations, but make sure to try other types of plots by moving variables and customize it to see what is possible.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;questionr&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Questionr&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;{questionr}&lt;/code&gt; addin is useful for survey analysis and when dealing with &lt;a href=&#34;/blog/data-types-in-r/#factor&#34;&gt;factor variables&lt;/a&gt;. With this addin, you can easily reorder and recode factor variables. The addin also allows to easily transform a numeric variable into factors (i.e., categorize a continuous variable) thanks to the &lt;code&gt;cut()&lt;/code&gt; function. Like any other addin, after having installed the &lt;code&gt;{questionr}&lt;/code&gt; package, you should see it appearing in the addins menu at the top. From the addins dropdown menu, choose whether you want to reorder or recode your factor variable, or categorize your numeric variable.&lt;/p&gt;
&lt;div id=&#34;recoding-factors&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Recoding factors&lt;/h3&gt;
&lt;p&gt;Instead of writing the &lt;code&gt;recode()&lt;/code&gt; function from the &lt;code&gt;{dplyr}&lt;/code&gt; package, we can use the &lt;code&gt;{questionr}&lt;/code&gt; addin.&lt;/p&gt;
&lt;p&gt;For this example, let’s say we want to recode the &lt;code&gt;Species&lt;/code&gt; variable to shorten the length of the factors, and then store this new variable as &lt;code&gt;Species_rec&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/blog/best-rstudio-addins-in-rstudio-or-how-to-make-your-coding-life-easier_files/Screenshot%202020-01-27%20at%2010.04.35.png&#34; alt=&#34;Step 1: Select the variable to be recoded and the recoding settings&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Step 1: Select the variable to be recoded and the recoding settings&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/blog/best-rstudio-addins-in-rstudio-or-how-to-make-your-coding-life-easier_files/Screenshot%202020-01-27%20at%2010.04.39.png&#34; alt=&#34;Step 2: Specify the names of the new factors&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Step 2: Specify the names of the new factors&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/blog/best-rstudio-addins-in-rstudio-or-how-to-make-your-coding-life-easier_files/Screenshot%202020-01-27%20at%2010.04.42.png&#34; alt=&#34;Step 3: Check the results thanks to the contingency table and use the code at the top&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Step 3: Check the results thanks to the contingency table and use the code at the top&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;reordering-factors&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Reordering factors&lt;/h3&gt;
&lt;p&gt;Similar to recoding, we can reorder factors thanks to the &lt;code&gt;{questionr}&lt;/code&gt; addin. Let’s say we want to reorder the 3 factors of the &lt;code&gt;Species&lt;/code&gt; variable such that the order is &lt;code&gt;versicolor&lt;/code&gt; then &lt;code&gt;virginica&lt;/code&gt; and finally &lt;code&gt;setosa&lt;/code&gt;. This can be done as follows:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/blog/best-rstudio-addins-in-rstudio-or-how-to-make-your-coding-life-easier_files/Screenshot%202020-01-27%20at%2010.06.28.png&#34; alt=&#34;Step 1: Select the variable to reorder and the new variable name&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Step 1: Select the variable to reorder and the new variable name&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/blog/best-rstudio-addins-in-rstudio-or-how-to-make-your-coding-life-easier_files/Screenshot%202020-01-27%20at%2010.06.31.png&#34; alt=&#34;Step 2: Specify the order you want&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Step 2: Specify the order you want&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/blog/best-rstudio-addins-in-rstudio-or-how-to-make-your-coding-life-easier_files/Screenshot%202020-01-27%20at%2010.06.36.png&#34; alt=&#34;Step 3: Use the code at the top in your script&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Step 3: Use the code at the top in your script&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;categorize-a-numeric-variable&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Categorize a numeric variable&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;{questionr}&lt;/code&gt; addin also allows to transform a numeric variable into a categorical variable. This is often done for the age, when age is transformed into age groups for instance. For this example, let’s say we want to create 3 categories of the variable &lt;code&gt;Sepal.Length&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/blog/best-rstudio-addins-in-rstudio-or-how-to-make-your-coding-life-easier_files/Screenshot%202020-01-27%20at%2010.39.12.png&#34; alt=&#34;Step 1: Choose the variable to be transformed and the new variable name&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Step 1: Choose the variable to be transformed and the new variable name&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/blog/best-rstudio-addins-in-rstudio-or-how-to-make-your-coding-life-easier_files/Screenshot%202020-01-27%20at%2010.39.41.png&#34; alt=&#34;Step 2: Set the number of breaks equal to 3&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Step 2: Set the number of breaks equal to 3&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;(Try by yourself the other cutting methods and see the results directly in the window.)&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/blog/best-rstudio-addins-in-rstudio-or-how-to-make-your-coding-life-easier_files/Screenshot%202020-01-27%20at%2010.40.15.png&#34; alt=&#34;Step 3: Check the result thanks to the barplot at the bottom&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Step 3: Check the result thanks to the barplot at the bottom&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/blog/best-rstudio-addins-in-rstudio-or-how-to-make-your-coding-life-easier_files/Screenshot%202020-01-27%20at%2010.40.23.png&#34; alt=&#34;Step 4: Use the code in your script&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Step 4: Use the code in your script&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;remedy&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Remedy&lt;/h2&gt;
&lt;p&gt;If you often write in R Markdown, the &lt;code&gt;{remedy}&lt;/code&gt; addins will greatly facilitate your work. The addins allows you to add bold, creating lists, urls, italics, title (H1 to H6), footnote, etc. in an efficient way. I reckon that some of these tasks can be done faster by using the code directly rather than by going through the addins menu and then selecting the transformations you want. However, I personnaly cannot remember the code for all transformations, and it is quicker to apply it through the menu than by searching for the answer on Google or on your Markdown cheat sheet.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;styler&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Styler&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;{styler}&lt;/code&gt; addin allows to reformat your code in a more readable format by running &lt;code&gt;styler::tidyverse_style()&lt;/code&gt;. It works both for R scripts and R Markdown documents. You can either reformat the selected code, the active file or the active package. I find this addin particularly useful before sharing or publishing my code, so that it respects the most common styling guidelines for code.&lt;/p&gt;
&lt;p&gt;For instance, a piece of code like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1+1
#this is a comment
  for(i in 1:10){if(!i%%2){next}
print(i)
 }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;becomes much more neat and readable:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1 + 1
# this is a comment
for (i in 1:10) {
  if (!i %% 2) {
    next
  }
  print(i)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;snakecaser&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Snakecaser&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;{snakecaser}&lt;/code&gt; addins converts a character string to the snake case styling. Snake case styling is the practice of writing character strings of several words separated by space into character strings with words separated with an underscore (&lt;code&gt;_&lt;/code&gt;). Moreover, it replaces capital letters with lowercases. For instance, the following string:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;This is the Test 1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;will be transformed to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;this_is_the_test_1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The snake case styling is particularly useful (and even recommended by many R users) for variables, functions and file names, etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;viewpipesteps&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;ViewPipeSteps&lt;/h2&gt;
&lt;p&gt;Thanks to a reader of this article, I discovered the &lt;code&gt;ViewPipeSteps&lt;/code&gt; addin. This addin allows to print or view the output of your pipe chain after each step.&lt;/p&gt;
&lt;p&gt;For instance, here is a chain with the dataset &lt;code&gt;diamonds&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)

diamonds %&amp;gt;%
  select(carat, cut, color, clarity, price) %&amp;gt;%
  group_by(color) %&amp;gt;%
  summarise(n = n(), price = mean(price)) %&amp;gt;%
  arrange(desc(color))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 7 x 3
##   color     n price
##   &amp;lt;ord&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt;
## 1 J      2808 5324.
## 2 I      5422 5092.
## 3 H      8304 4487.
## 4 G     11292 3999.
## 5 F      9542 3725.
## 6 E      9797 3077.
## 7 D      6775 3170.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you are unsure about your pipe chain or want to debug it, you can view the output after each step by highlighting your entire chain then clicking on “View Pipe Chain Steps” from the addins menu:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/blog/best-rstudio-addins-in-rstudio-or-how-to-make-your-coding-life-easier_files/Screenshot%202020-03-11%20at%2018.06.01.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;From the addins menu, you can choose to either print the result to the console, or view the result in a new pane (as if you called the function &lt;code&gt;View()&lt;/code&gt; after each step of the pipe). Clicking on View Pipe Chain Steps will open a new window with the output of each step:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/blog/best-rstudio-addins-in-rstudio-or-how-to-make-your-coding-life-easier_files/Screenshot%202020-03-11%20at%2018.09.59.png&#34; style=&#34;width:100.0%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Note that you have to use the following command to install the &lt;code&gt;ViewPipeSteps&lt;/code&gt; addin:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;devtools::install_github(&amp;quot;daranzolin/ViewPipeSteps&amp;quot;)
library(ViewPipeSteps)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, you have no more excuses to use this pipe operator!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;blogdown&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Blogdown&lt;/h2&gt;
&lt;p&gt;I put this addin at the end of the list because it will be of interest for only a limited number of RStudio users: people maintaining a blog written in R (like this blog).&lt;/p&gt;
&lt;p&gt;The most useful functionalities in this addin are the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;New post: create a new post with &lt;code&gt;blogdown::new_post()&lt;/code&gt;. It can be used to create new pages as well, not only posts&lt;/li&gt;
&lt;li&gt;Insert image: insert an external image into a blog post&lt;/li&gt;
&lt;li&gt;Update metadata: update the title, author, date, categories and tags of the current blog post&lt;/li&gt;
&lt;li&gt;Serve site: run &lt;code&gt;blogdown::serve_site()&lt;/code&gt; to live preview your website locally&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks for reading. I hope that you will find these addins useful for your future R-related projects. See other &lt;a href=&#34;/blog/tips-and-tricks-in-rstudio-and-r-markdown/&#34;&gt;tips and tricks in RStudio and R Markdown&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As always, if you have a question or a suggestion related to the topic covered in this article, please add it as a comment so other readers can benefit from the discussion. If you find a mistake or bug, you can inform me by &lt;a href=&#34;https://github.com/AntoineSoetewey/statsandr/issues&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;raising an issue on GitHub&lt;/a&gt;. For all other requests, you can contact me &lt;a href=&#34;/contact/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Get updates every time a new article is published by &lt;a href=&#34;/subscribe/&#34;&gt;subscribing to this blog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Related articles:&lt;/strong&gt;&lt;/p&gt;
&lt;script src=&#34;//rss.bloople.net/?url=https%3A%2F%2Fwww.statsandr.com%2Ftags%2Fr%2Findex.xml&amp;detail=-1&amp;limit=5&amp;showtitle=false&amp;type=js&#34;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;You actually do not need to rename it. However, I often rename the datasets I work on with the same generic name &lt;code&gt;dat&lt;/code&gt; so when I reuse codes from a previous project for a new project, I do not have to change the name of the dataset in the code.&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Tips and tricks in RStudio and R Markdown</title>
      <link>/blog/tips-and-tricks-in-rstudio-and-r-markdown/</link>
      <pubDate>Tue, 21 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/tips-and-tricks-in-rstudio-and-r-markdown/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#run-code&#34;&gt;Run code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#insert-a-comment-in-r-and-r-markdown&#34;&gt;Insert a comment in R and R Markdown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#knit-a-r-markdown-document&#34;&gt;Knit a R Markdown document&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#code-snippets&#34;&gt;Code snippets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ordered-list-in-r-markdown&#34;&gt;Ordered list in R Markdown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#new-code-chunk-in-r-markdown&#34;&gt;New code chunk in R Markdown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#reformat-code&#34;&gt;Reformat code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#rstudio-addins&#34;&gt;RStudio addins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pander-for-aesthetics&#34;&gt;&lt;code&gt;{pander}&lt;/code&gt; for aesthetics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pipe-operator&#34;&gt;Pipe operator &lt;code&gt;%&amp;gt;%&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#others&#34;&gt;Others&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/blog/tips-and-tricks-in-r-markdown_files/tips-and-tricks-rstudio-and-r-markdown.jpeg&#34; alt=&#34;Photo by Juan Gomez&#34; style=&#34;width:100.0%&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Photo by Juan Gomez&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;If you have the chance to work with an experienced programmer, you may be amazed by how fast she can write code. In this article, I share some tips and shortcuts you can use in RStudio and &lt;a href=&#34;/blog/getting-started-in-r-markdown/&#34;&gt;R Markdown&lt;/a&gt; to speed up the writing of your code.&lt;/p&gt;
&lt;div id=&#34;run-code&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Run code&lt;/h1&gt;
&lt;p&gt;You most probably already know this shortcut but I still mention it for new R users. From your script you can run a chunk of code with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;command + Enter on Mac
Ctrl + Enter on Windows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;insert-a-comment-in-r-and-r-markdown&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Insert a comment in R and R Markdown&lt;/h1&gt;
&lt;p&gt;To insert a comment:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;command + Shift + C on Mac
Ctrl + Shift + C on Windows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This shortcut can be used both for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;R code when you want to comment your code. It will add a &lt;code&gt;#&lt;/code&gt; at the beginning of the line&lt;/li&gt;
&lt;li&gt;for text in R Markdown. It will add &lt;code&gt;&amp;lt;!--&lt;/code&gt; and &lt;code&gt;--&amp;gt;&lt;/code&gt; around the text&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that if you want to comment more than one line, select all the lines you want to comment then use the shortcut. If you want to uncomment a comment, apply the same shortcut.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;knit-a-r-markdown-document&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Knit a R Markdown document&lt;/h1&gt;
&lt;p&gt;You can knit R Markdown documents by using this shortcut:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;command + Shift + K on Mac
Ctrl + Shift + K on Windows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;code-snippets&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Code snippets&lt;/h1&gt;
&lt;p&gt;Code snippets is usually a few characters long and is used as a shortcut to insert a common piece of code. You simply type a few characters then press &lt;code&gt;Tab&lt;/code&gt; and it will complete your code with a larger code. &lt;code&gt;Tab&lt;/code&gt; is then used again to navigate through the code where customization is required. For instance, if you type &lt;code&gt;fun&lt;/code&gt; then press &lt;code&gt;Tab&lt;/code&gt;, it will auto-complete the code with the required code to create a function:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;name &amp;lt;- function(variables) {
  
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pressing &lt;code&gt;Tab&lt;/code&gt; again will jump through the placeholders for you to edit it. So you can first edit the name of the function, then the variables and finally the code inside the function (try by yourself!).&lt;/p&gt;
&lt;p&gt;There are many code snippets by default in RStudio. Here are the code snippets I use most often:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lib&lt;/code&gt; to call &lt;code&gt;library()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(package)&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mat&lt;/code&gt; to create a matrix&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;matrix(data, nrow = rows, ncol = cols)&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;if&lt;/code&gt;, &lt;code&gt;el&lt;/code&gt;, and &lt;code&gt;ei&lt;/code&gt; to create conditional expressions such as &lt;code&gt;if() {}&lt;/code&gt;, &lt;code&gt;else {}&lt;/code&gt; and &lt;code&gt;else if () {}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if (condition) {
  
}

else {
  
}

else if (condition) {
  
}&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fun&lt;/code&gt; to create a function&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;name &amp;lt;- function(variables) {
  
}&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;for&lt;/code&gt; to create for loops&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;for (variable in vector) {
  
}&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ts&lt;/code&gt; to insert a comment with the current date and time (useful if you have very long code and share it with others so they see when it has been edited)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Tue Jan 21 20:20:14 2020 ------------------------------&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shinyapp&lt;/code&gt; every time I create a new &lt;a href=&#34;/tags/shiny/&#34;&gt;shiny app&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(shiny)

ui &amp;lt;- fluidPage(
  
)

server &amp;lt;- function(input, output, session) {
  
}

shinyApp(ui, server)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can see all default code snippets and add yours by clicking on Tools &amp;gt; Global Options… &amp;gt; Code (left sidebar) &amp;gt; Edit Snippets…&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ordered-list-in-r-markdown&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Ordered list in R Markdown&lt;/h1&gt;
&lt;p&gt;In R Markdown, when creating an ordered list such as this one:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Item 1&lt;/li&gt;
&lt;li&gt;Item 2&lt;/li&gt;
&lt;li&gt;Item 3&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Instead of bothering with the numbers and typing&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. Item 1
2. Item 2
3. Item 3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;you can simply type&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. Item 1
1. Item 2
1. Item 3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;for the exact same result (try it yourself or check the code of this article!). This way you do not need to bother which number is next when creating a new item.&lt;/p&gt;
&lt;p&gt;To go even further, any numeric will actually render the same result as long as the first item is the number you want to start from. For example, you could type:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. Item 1
7. Item 2
3. Item 3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which renders&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Item 1&lt;/li&gt;
&lt;li&gt;Item 2&lt;/li&gt;
&lt;li&gt;Item 3&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;However, I suggest always using the number you want to start from for all items because if you move one item at the top, the list will start with this new number. For instance, if we move &lt;code&gt;7. Item 2&lt;/code&gt; from the previous list at the top, the list becomes:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;7. Item 2
1. Item 1
3. Item 3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which incorrectly renders&lt;/p&gt;
&lt;ol start=&#34;7&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Item 2&lt;/li&gt;
&lt;li&gt;Item 1&lt;/li&gt;
&lt;li&gt;Item 3&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;new-code-chunk-in-r-markdown&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;New code chunk in R Markdown&lt;/h1&gt;
&lt;p&gt;When editing R Markdown documents, you will need to insert a new R code chunk many times. The following shortcuts will make your life easier:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;command + option + I on Mac (or command + alt + I depending on your keyboard)
Ctrl + ALT + I on Windows&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/blog/tips-and-tricks-in-r-markdown_files/new%20R%20code%20chunk.png&#34; alt=&#34;New R code chunk in R Markdown&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;New R code chunk in R Markdown&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;reformat-code&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Reformat code&lt;/h1&gt;
&lt;p&gt;A clear and readable code is always easier and faster to read (and look more professional when sharing it to collaborators). To automatically apply the most common coding guidelines such as whitespaces, indents, etc., use:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cmd + Shift + A on Mac
Ctrl + Shift + A on Windows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So for example the following code which does not respect the guidelines (and which is not easy to read):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1+1
  for(i in 1:10){if(!i%%2){next}
print(i)
 }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;becomes much more neat and readable:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1 + 1
for (i in 1:10) {
  if (!i %% 2) {
    next
  }
  print(i)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;rstudio-addins&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;RStudio addins&lt;/h1&gt;
&lt;p&gt;RStudio addins are extensions which provide a simple mechanism for executing advanced R functions from within RStudio. In simpler words, when executing an addin (by clicking a button in the Addins menu), the corresponding code is executed without you having to write the code. RStudio addins have the advantage that they allow you to execute complex and advanced code much more easily than if you would have to write it yourself.&lt;/p&gt;
&lt;p&gt;The addin I use most often is probably the &lt;code&gt;{esquisse}&lt;/code&gt; addin, which allows to draw plots from the &lt;code&gt;{ggplot2}&lt;/code&gt; package in a user-friendly and interactive way, and without having to write the code myself.&lt;/p&gt;
&lt;p&gt;RStudio addins are quite diverse and require a more detailed explanation, so I wrote an article focusing on these addins. See the article &lt;a href=&#34;/blog/rstudio-addins-or-how-to-make-your-coding-life-easier/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;pander-for-aesthetics&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;code&gt;{pander}&lt;/code&gt; for aesthetics&lt;/h1&gt;
&lt;p&gt;The &lt;code&gt;pander()&lt;/code&gt; function from the &lt;code&gt;{pander}&lt;/code&gt; package is very useful for R Markdown documents and reporting. It is not actually a shortcut but it greatly improves the aesthetics of R outputs.&lt;/p&gt;
&lt;p&gt;For instance, see below the difference between the default output of a &lt;a href=&#34;/blog/chi-square-test-of-independence-in-r&#34;&gt;Chi-square test of independence&lt;/a&gt; and the output from the same test with the &lt;code&gt;pander()&lt;/code&gt; function (using the &lt;code&gt;diamonds&lt;/code&gt; dataset from the &lt;code&gt;{ggplot2}&lt;/code&gt; package):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)
dat &amp;lt;- diamonds

test &amp;lt;- chisq.test(table(dat$cut, dat$color))
test&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  Pearson&amp;#39;s Chi-squared test
## 
## data:  table(dat$cut, dat$color)
## X-squared = 310.32, df = 24, p-value &amp;lt; 2.2e-16&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(pander)
pander(test)&lt;/code&gt;&lt;/pre&gt;
&lt;table style=&#34;width:56%;&#34;&gt;
&lt;caption&gt;Pearson’s Chi-squared test: &lt;code&gt;table(dat$cut, dat$color)&lt;/code&gt;&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col width=&#34;23%&#34; /&gt;
&lt;col width=&#34;6%&#34; /&gt;
&lt;col width=&#34;25%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;center&#34;&gt;Test statistic&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;df&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;P value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;310.3&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;24&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1.395e-51 * * *&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;All information that you need are displayed in an elegant table. The &lt;code&gt;pander()&lt;/code&gt; function works on many statistical tests (not to say all of them, but I have not tried it on &lt;em&gt;all&lt;/em&gt; available tests in R) and on regression models:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Linear model with lm()
model &amp;lt;- lm(price ~ carat + x + y + z, data = dat)
model&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = price ~ carat + x + y + z, data = dat)
## 
## Coefficients:
## (Intercept)        carat            x            y            z  
##      1921.2      10233.9       -884.2        166.0       -576.2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pander(model)&lt;/code&gt;&lt;/pre&gt;
&lt;table style=&#34;width:90%;&#34;&gt;
&lt;caption&gt;Fitting linear model: price ~ carat + x + y + z&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col width=&#34;25%&#34; /&gt;
&lt;col width=&#34;15%&#34; /&gt;
&lt;col width=&#34;18%&#34; /&gt;
&lt;col width=&#34;13%&#34; /&gt;
&lt;col width=&#34;18%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;center&#34;&gt; &lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Estimate&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Std. Error&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;t value&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Pr(&amp;gt;|t|)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;(Intercept)&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1921&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;104.4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;18.41&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1.977e-75&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;carat&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;10234&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;62.94&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;162.6&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;x&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;-884.2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;40.47&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;-21.85&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2.317e-105&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;y&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;166&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;25.86&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;6.421&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1.365e-10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;z&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;-576.2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;39.28&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;-14.67&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1.277e-48&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The pander function also makes datasets, tables, vectors, etc. more readable in R Markdown output. For example, see the differences below:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(diamonds) # first 6 observations of a dataset&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 10
##   carat cut       color clarity depth table price     x     y     z
##   &amp;lt;dbl&amp;gt; &amp;lt;ord&amp;gt;     &amp;lt;ord&amp;gt; &amp;lt;ord&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1 0.23  Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43
## 2 0.21  Premium   E     SI1      59.8    61   326  3.89  3.84  2.31
## 3 0.23  Good      E     VS1      56.9    65   327  4.05  4.07  2.31
## 4 0.290 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63
## 5 0.31  Good      J     SI2      63.3    58   335  4.34  4.35  2.75
## 6 0.24  Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pander(head(diamonds))&lt;/code&gt;&lt;/pre&gt;
&lt;table style=&#34;width:100%;&#34;&gt;
&lt;colgroup&gt;
&lt;col width=&#34;9%&#34; /&gt;
&lt;col width=&#34;14%&#34; /&gt;
&lt;col width=&#34;9%&#34; /&gt;
&lt;col width=&#34;12%&#34; /&gt;
&lt;col width=&#34;9%&#34; /&gt;
&lt;col width=&#34;9%&#34; /&gt;
&lt;col width=&#34;9%&#34; /&gt;
&lt;col width=&#34;8%&#34; /&gt;
&lt;col width=&#34;8%&#34; /&gt;
&lt;col width=&#34;8%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;center&#34;&gt;carat&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;cut&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;color&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;clarity&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;depth&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;table&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;price&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;x&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;y&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;z&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;0.23&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Ideal&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;E&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;SI2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;61.5&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;55&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;326&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3.95&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3.98&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2.43&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;0.21&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Premium&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;E&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;SI1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;59.8&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;61&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;326&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3.89&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3.84&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2.31&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;0.23&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Good&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;E&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;VS1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;56.9&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;65&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;327&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;4.05&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;4.07&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2.31&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;0.29&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Premium&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;I&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;VS2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;62.4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;58&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;334&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;4.2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;4.23&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2.63&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;0.31&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Good&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;J&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;SI2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;63.3&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;58&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;335&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;4.34&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;4.35&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2.75&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;0.24&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Very Good&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;J&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;VVS2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;62.8&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;57&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;336&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3.94&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3.96&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2.48&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(diamonds) # main descriptive statistics&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      carat               cut        color        clarity          depth      
##  Min.   :0.2000   Fair     : 1610   D: 6775   SI1    :13065   Min.   :43.00  
##  1st Qu.:0.4000   Good     : 4906   E: 9797   VS2    :12258   1st Qu.:61.00  
##  Median :0.7000   Very Good:12082   F: 9542   SI2    : 9194   Median :61.80  
##  Mean   :0.7979   Premium  :13791   G:11292   VS1    : 8171   Mean   :61.75  
##  3rd Qu.:1.0400   Ideal    :21551   H: 8304   VVS2   : 5066   3rd Qu.:62.50  
##  Max.   :5.0100                     I: 5422   VVS1   : 3655   Max.   :79.00  
##                                     J: 2808   (Other): 2531                  
##      table           price             x                y         
##  Min.   :43.00   Min.   :  326   Min.   : 0.000   Min.   : 0.000  
##  1st Qu.:56.00   1st Qu.:  950   1st Qu.: 4.710   1st Qu.: 4.720  
##  Median :57.00   Median : 2401   Median : 5.700   Median : 5.710  
##  Mean   :57.46   Mean   : 3933   Mean   : 5.731   Mean   : 5.735  
##  3rd Qu.:59.00   3rd Qu.: 5324   3rd Qu.: 6.540   3rd Qu.: 6.540  
##  Max.   :95.00   Max.   :18823   Max.   :10.740   Max.   :58.900  
##                                                                   
##        z         
##  Min.   : 0.000  
##  1st Qu.: 2.910  
##  Median : 3.530  
##  Mean   : 3.539  
##  3rd Qu.: 4.040  
##  Max.   :31.800  
## &lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pander(summary(diamonds))&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;caption&gt;Table continues below&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col width=&#34;22%&#34; /&gt;
&lt;col width=&#34;23%&#34; /&gt;
&lt;col width=&#34;12%&#34; /&gt;
&lt;col width=&#34;20%&#34; /&gt;
&lt;col width=&#34;20%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;center&#34;&gt;carat&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;cut&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;color&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;clarity&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;depth&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;Min. :0.2000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Fair : 1610&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;D: 6775&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;SI1 :13065&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Min. :43.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;1st Qu.:0.4000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Good : 4906&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;E: 9797&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;VS2 :12258&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1st Qu.:61.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;Median :0.7000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Very Good:12082&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;F: 9542&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;SI2 : 9194&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Median :61.80&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;Mean :0.7979&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Premium :13791&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;G:11292&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;VS1 : 8171&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Mean :61.75&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;3rd Qu.:1.0400&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Ideal :21551&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;H: 8304&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;VVS2 : 5066&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3rd Qu.:62.50&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;Max. :5.0100&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;I: 5422&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;VVS1 : 3655&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Max. :79.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;J: 2808&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(Other): 2531&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;NA&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;19%&#34; /&gt;
&lt;col width=&#34;19%&#34; /&gt;
&lt;col width=&#34;20%&#34; /&gt;
&lt;col width=&#34;20%&#34; /&gt;
&lt;col width=&#34;20%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;center&#34;&gt;table&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;price&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;x&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;y&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;z&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;Min. :43.00&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Min. : 326&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Min. : 0.000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Min. : 0.000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Min. : 0.000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;1st Qu.:56.00&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1st Qu.: 950&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1st Qu.: 4.710&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1st Qu.: 4.720&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1st Qu.: 2.910&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;Median :57.00&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Median : 2401&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Median : 5.700&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Median : 5.710&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Median : 3.530&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;Mean :57.46&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Mean : 3933&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Mean : 5.731&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Mean : 5.735&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Mean : 3.539&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;3rd Qu.:59.00&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3rd Qu.: 5324&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3rd Qu.: 6.540&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3rd Qu.: 6.540&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3rd Qu.: 4.040&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;Max. :95.00&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Max. :18823&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Max. :10.740&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Max. :58.900&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Max. :31.800&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;NA&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;table(dat$cut, dat$color) # contingency table&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##            
##                D    E    F    G    H    I    J
##   Fair       163  224  312  314  303  175  119
##   Good       662  933  909  871  702  522  307
##   Very Good 1513 2400 2164 2299 1824 1204  678
##   Premium   1603 2337 2331 2924 2360 1428  808
##   Ideal     2834 3903 3826 4884 3115 2093  896&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pander(table(dat$cut, dat$color))&lt;/code&gt;&lt;/pre&gt;
&lt;table style=&#34;width:90%;&#34;&gt;
&lt;colgroup&gt;
&lt;col width=&#34;22%&#34; /&gt;
&lt;col width=&#34;9%&#34; /&gt;
&lt;col width=&#34;9%&#34; /&gt;
&lt;col width=&#34;9%&#34; /&gt;
&lt;col width=&#34;9%&#34; /&gt;
&lt;col width=&#34;9%&#34; /&gt;
&lt;col width=&#34;9%&#34; /&gt;
&lt;col width=&#34;9%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;center&#34;&gt; &lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;D&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;E&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;F&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;G&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;H&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;I&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;J&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Fair&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;163&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;224&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;312&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;314&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;303&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;175&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;119&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Good&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;662&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;933&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;909&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;871&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;702&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;522&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;307&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Very Good&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1513&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2400&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2164&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2299&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1824&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1204&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;678&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Premium&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1603&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2337&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2331&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2924&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2360&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1428&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;808&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Ideal&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2834&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3903&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3826&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;4884&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3115&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2093&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;896&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;names(dat) # variable names&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;carat&amp;quot;   &amp;quot;cut&amp;quot;     &amp;quot;color&amp;quot;   &amp;quot;clarity&amp;quot; &amp;quot;depth&amp;quot;   &amp;quot;table&amp;quot;   &amp;quot;price&amp;quot;  
##  [8] &amp;quot;x&amp;quot;       &amp;quot;y&amp;quot;       &amp;quot;z&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pander(names(dat))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;carat&lt;/em&gt;, &lt;em&gt;cut&lt;/em&gt;, &lt;em&gt;color&lt;/em&gt;, &lt;em&gt;clarity&lt;/em&gt;, &lt;em&gt;depth&lt;/em&gt;, &lt;em&gt;table&lt;/em&gt;, &lt;em&gt;price&lt;/em&gt;, &lt;em&gt;x&lt;/em&gt;, &lt;em&gt;y&lt;/em&gt; and &lt;em&gt;z&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rnorm(4) # generates 4 observations from a standard normal distribution&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  1.4742574 -0.3038638  1.5244488  1.1083355&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pander(rnorm(4))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;-0.4801&lt;/em&gt;, &lt;em&gt;2.016&lt;/em&gt;, &lt;em&gt;-0.4474&lt;/em&gt; and &lt;em&gt;-0.662&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;pipe-operator&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Pipe operator &lt;code&gt;%&amp;gt;%&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;If you are using the &lt;code&gt;{dplyr}&lt;/code&gt;, &lt;code&gt;{tidyverse}&lt;/code&gt; or &lt;code&gt;{magrittr}&lt;/code&gt; packages often, here is a shortcut for the pipe operator &lt;code&gt;%&amp;gt;%&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;command + Shift + M on Mac
Ctrl + Shift + M on Windows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;others&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Others&lt;/h1&gt;
&lt;p&gt;Similar to many other programs, you can also use:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;command + Shift + N&lt;/code&gt; on Mac and &lt;code&gt;Ctrl + Shift + N&lt;/code&gt; on Windows to open a new R Script&lt;/li&gt;
&lt;li&gt;&lt;code&gt;command + S&lt;/code&gt; on Mac and &lt;code&gt;Ctrl + S&lt;/code&gt; on Windows to save your current script or R Markdown document&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks for reading. I hope you find these tips and tricks useful. If you are using others, feel free to share them in the comment section. See this &lt;a href=&#34;/blog/getting-started-in-r-markdown/&#34;&gt;starting guide in R Markdown&lt;/a&gt; if you are unfamiliar with it.&lt;/p&gt;
&lt;p&gt;As always, if you have a question or a suggestion related to the topic covered in this article, please add it as a comment so other readers can benefit from the discussion. If you find a mistake or bug, you can inform me by &lt;a href=&#34;https://github.com/AntoineSoetewey/statsandr/issues&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;raising an issue on GitHub&lt;/a&gt;. For all other requests, you can contact me &lt;a href=&#34;/contact/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Get updates every time a new article is published by &lt;a href=&#34;/subscribe/&#34;&gt;subscribing to this blog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Related articles:&lt;/strong&gt;&lt;/p&gt;
&lt;script src=&#34;//rss.bloople.net/?url=https%3A%2F%2Fwww.statsandr.com%2Ftags%2Fr%2Findex.xml&amp;detail=-1&amp;limit=5&amp;showtitle=false&amp;type=js&#34;&gt;&lt;/script&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>